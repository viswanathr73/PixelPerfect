export = injectMethodEx;
/**
 * Inject method to an object.
 *
 * **Note**: The original method will be passed into the new method as first argument
 *
 * @param {object} aObject the target object to inject
 * @param {string} aMethodName the target method to inject
 * @param {Function} aNewMethod the new method to be injected into the aObject.
 * @param {boolean} bindThis optional whether the `Inherited` should bind `this` , defaults to `false`
 *
 * @example
 * class A {
 *   method() {console.log('A', arguments, this)}
 * }
 *
 * injectMethodEx(A.prototype, 'method', function(oldMethod, ...args) {
 *   console.log('B', args, this)
 *   oldMethod.apply(this, args)
 * })
 *
 * const a = new A
 * a.x = 1
 * a.method(12, 3)
 */
declare function injectMethodEx(aObject: object, aMethodName: string, aNewMethod: Function): any;
