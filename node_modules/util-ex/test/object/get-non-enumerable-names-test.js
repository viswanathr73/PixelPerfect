// Generated by CoffeeScript 1.12.7
var assert, chai, defineProperty, should, sinon, sinonChai,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

chai = require('chai');

sinon = require('sinon');

sinonChai = require('sinon-chai');

assert = chai.assert;

should = chai.should();

chai.use(sinonChai);

defineProperty = require('../../src/defineProperty');

describe("get-non-enumerable-names", function() {
  var getNames;
  getNames = require('../../src/get-non-enumerable-names');
  it("should get non-enumerable names", function() {
    var result, test;
    test = {
      hi: 12,
      thay: "asf"
    };
    defineProperty(test, 'non1', 1);
    defineProperty(test, 'non2', 2);
    result = getNames(test);
    return result.should.be.deep.equal(['non1', 'non2']);
  });
  it("should get non-enumerable names with empty object", function() {
    var result, test;
    test = {};
    result = getNames(test);
    return result.should.be.deep.equal([]);
  });
  return it("should get non-enumerable names with inherits object", function() {
    var Root, Test, result, test;
    Root = (function() {
      function Root() {}

      Root.prototype.ro1 = 12;

      return Root;

    })();
    Test = (function(superClass) {
      extend(Test, superClass);

      defineProperty(Test.prototype, 'non1', 1);

      function Test() {
        defineProperty(this, 'non2', 1);
      }

      return Test;

    })(Root);
    test = new Test;
    result = getNames(test);
    return result.should.be.deep.equal(['non2']);
  });
});
