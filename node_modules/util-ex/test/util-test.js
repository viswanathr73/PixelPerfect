// Generated by CoffeeScript 2.7.0
var assert, chai, expect, log, should, sinon, sinonChai, util;

chai = require('chai');

sinon = require('sinon');

sinonChai = require('sinon-chai');

assert = chai.assert;

expect = chai.expect;

should = chai.should();

util = require("../src/");

log = require("../src/log");

chai.use(sinonChai);

describe("isEmptyObject", function() {
  var isEmpty;
  isEmpty = util.isEmptyObject;
  return it("should be empty", function() {
    assert.ok(isEmpty(null));
    assert.ok(isEmpty({}));
    assert.notOk(isEmpty({
      length: 0
    }));
    return assert.notOk(isEmpty({
      k: void 0
    }));
  });
});

describe("isEmpty", function() {
  var isEmpty, isEmptyFunction;
  isEmpty = util.isEmpty;
  isEmptyFunction = util.isEmptyFunction;
  it("should be empty", function() {
    assert.ok(isEmpty(null));
    assert.ok(isEmpty(""));
    assert.ok(isEmpty({}));
    assert.ok(isEmpty([]));
    (function() {
      return assert.ok(isEmpty(arguments));
    })();
    assert.notOk(isEmpty("hi"));
    assert.notOk(isEmpty({
      length: 0
    }));
    assert.notOk(isEmpty([1]));
    return (function() {
      return assert.notOk(isEmpty(arguments));
    })(1);
  });
  return it("should be empty function", function() {
    var emptyFunc;
    emptyFunc = function() {};
    isEmpty(emptyFunc).should.be.true;
    emptyFunc = function(abc, ase) {};
    isEmpty(emptyFunc).should.be.true;
    isEmptyFunction("function(arg1, arg2, arg3){\n}").should.be.true;
    isEmptyFunction("function(arg1, arg2, arg3){\n;}").should.be.true;
    isEmptyFunction("function   asFn  (arg1, arg2, arg3){\n\n;}").should.be.true;
    return expect(isEmptyFunction("function(arg1, arg2, arg3){abs;}")).not.to.true;
  });
});

describe("inject", function() {
  var inject;
  inject = util.inject;
  it("should inject a function before execution", function() {
    var onBefore, run;
    run = function(a, b, c) {
      return [a, b, c];
    };
    onBefore = sinon.spy();
    run = inject(run, onBefore);
    run(1, "b", 3).should.be.deep.equal([1, "b", 3]);
    onBefore.should.have.been.calledWith(1, "b", 3);
    return onBefore.should.have.been.calledOnce;
  });
  it("should inject a function before execution and change the arguments", function() {
    var onBefore, run, runOrg;
    runOrg = sinon.spy(function(a, b, c) {
      return [a, b, c];
    });
    onBefore = sinon.spy(function(a, b, c) {
      a = 2;
      b = "B";
      c = 4;
      return arguments;
    });
    run = inject(runOrg, onBefore);
    run(1, "b", 3).should.be.deep.equal([2, "B", 4]);
    onBefore.should.have.been.calledWith(1, "b", 3);
    onBefore.should.have.been.calledOnce;
    runOrg.should.have.been.calledOnce;
  });
  it("should inject a function before execution and deny the original function execution", function() {
    var onBefore, run, runOrg;
    runOrg = sinon.spy(function(a, b, c) {
      return [a, b, c];
    });
    onBefore = sinon.spy(function() {
      return false;
    });
    run = inject(runOrg, onBefore);
    run(1, "b", 3).should.be.false;
    onBefore.should.have.been.calledWith(1, "b", 3);
    onBefore.should.have.been.calledOnce;
    return runOrg.should.have.not.been.called;
  });
  it("should inject a function after execution", function() {
    var onAfter, run, runOrg;
    runOrg = sinon.spy(function(a, b, c) {
      return [a, b, c];
    });
    onAfter = sinon.spy(function(a, b, c, result, isDenied) {
      a.should.be.equal(1);
      b.should.be.equal("b");
      c.should.be.equal(3);
      result.should.be.deep.equal([1, "b", 3]);
      isDenied.should.be.false;
    });
    run = inject(runOrg, null, onAfter);
    run(1, "b", 3).should.be.deep.equal([1, "b", 3]);
    onAfter.should.have.been.calledWith(1, "b", 3);
    onAfter.should.have.been.calledOnce;
    return runOrg.should.have.been.calledOnce;
  });
  it("should inject a function after execution and change result", function() {
    var onAfter, run, runOrg;
    runOrg = sinon.spy(function(a, b, c) {
      return [a, b, c];
    });
    onAfter = sinon.spy(function(a, b, c, result, isDenied) {
      a.should.be.equal(1);
      b.should.be.equal("b");
      c.should.be.equal(3);
      result.should.be.deep.equal([1, "b", 3]);
      isDenied.should.be.false;
      return [1, 2, 3];
    });
    run = inject(runOrg, null, onAfter);
    run(1, "b", 3).should.be.deep.equal([1, 2, 3]);
    onAfter.should.have.been.calledWith(1, "b", 3);
    onAfter.should.have.been.calledOnce;
    return runOrg.should.have.been.calledOnce;
  });
  return it("should inject a function before and after execution", function() {
    var onAfter, onBefore, run, runOrg;
    runOrg = sinon.spy(function(a, b, c) {
      return [a, b, c];
    });
    onBefore = sinon.spy();
    onAfter = sinon.spy(function(a, b, c, result, isDenied) {
      a.should.be.equal(1);
      b.should.be.equal("b");
      c.should.be.equal(3);
      result.should.be.deep.equal([1, "b", 3]);
      isDenied.should.be.false;
    });
    run = inject(runOrg, onBefore, onAfter);
    run(1, "b", 3).should.be.deep.equal([1, "b", 3]);
    onBefore.should.have.been.calledWith(1, "b", 3);
    onBefore.should.have.been.calledOnce;
    onAfter.should.have.been.calledWith(1, "b", 3);
    onAfter.should.have.been.calledOnce;
    return runOrg.should.have.been.calledOnce;
  });
});

describe("isRegExp", function() {
  var isRegExp;
  isRegExp = util.isRegExp;
  it("should check a RegExp instance correct", function() {
    isRegExp(/ahi/).should.be.true;
    return isRegExp(new RegExp()).should.be.true;
  });
  return it("should check an illegal RegExp argument correct", function() {
    isRegExp().should.be.false;
    isRegExp(RegExp).should.be.false;
    return isRegExp("/sdd/g").should.be.false;
  });
});

describe("isDate", function() {
  var isDate;
  isDate = util.isDate;
  it("should check a Date instance correct", function() {
    isDate(new Date()).should.be.true;
    return isDate(new Date(2015, 1, 1)).should.be.true;
  });
  return it("should check an illegal date argument correct", function() {
    isDate().should.be.false;
    isDate(Date).should.be.false;
    return isDate("2015-01-01").should.be.false;
  });
});

describe("isUndefined", function() {
  var isUndefined;
  isUndefined = util.isUndefined;
  it("should check undefined type correct", function() {
    isUndefined(void 0).should.be.true;
    return isUndefined(undefined).should.be.true;
  });
  return it("should check an other type to false", function() {
    isUndefined(null).should.be.false;
    isUndefined(Date).should.be.false;
    isUndefined(false).should.be.false;
    isUndefined(0).should.be.false;
    return isUndefined('undefined').should.be.false;
  });
});

describe("isNullOrUndefined", function() {
  var isNullOrUndefined;
  isNullOrUndefined = util.isNullOrUndefined;
  it("should check undefined type correct", function() {
    return isNullOrUndefined(void 0).should.be.true;
  });
  it("should check null type correct", function() {
    return isNullOrUndefined(null).should.be.true;
  });
  return it("should check an other type to false", function() {
    isNullOrUndefined(Date).should.be.false;
    isNullOrUndefined(false).should.be.false;
    isNullOrUndefined(0).should.be.false;
    return isNullOrUndefined('undefined').should.be.false;
  });
});

describe("isObject", function() {
  var isObject;
  isObject = util.isObject;
  it("should check object type correct", function() {
    var Obj, obj;
    Obj = function() {};
    obj = Object.create(null);
    isObject({}).should.be.true;
    isObject(obj).should.be.true;
    isObject(new Obj()).should.be.true;
    isObject(new Date()).should.be.true;
    return isObject(/dd/).should.be.true;
  });
  return it("should check an other type to false", function() {
    isObject(null).should.be.false;
    isObject("object").should.be.false;
    isObject(false).should.be.false;
    isObject(true).should.be.false;
    isObject(0).should.be.false;
    return isObject(function() {}).should.be.false;
  });
});

describe("isFunction", function() {
  var isFunction;
  isFunction = util.isFunction;
  it("should check function type correct", function() {
    isFunction(function() {}).should.be.true;
    isFunction(Date).should.be.true;
    return isFunction(RegExp).should.be.true;
  });
  return it("should check an other type to false", function() {
    isFunction(new RegExp()).should.be.false;
    isFunction(new (function() {})()).should.be.false;
    isFunction(false).should.be.false;
    isFunction(true).should.be.false;
    isFunction(0).should.be.false;
    isFunction(null).should.be.false;
    isFunction(void 0).should.be.false;
    return isFunction("").should.be.false;
  });
});

describe("isString", function() {
  var isString;
  isString = util.isString;
  it("should check string type correct", function() {
    isString("").should.be.true;
    return isString("hello").should.be.true;
  });
  return it("should check an other type to false", function() {
    isString(new RegExp()).should.be.false;
    isString(new (function() {})()).should.be.false;
    isString(false).should.be.false;
    isString(true).should.be.false;
    isString(0).should.be.false;
    isString(null).should.be.false;
    return isString(void 0).should.be.false;
  });
});

describe("_extend", function() {
  var extend;
  extend = util._extend;
  it("should extend an object", function() {
    var add, org;
    org = {
      a: 1,
      b: 2
    };
    add = {
      a: 3
    };
    extend(org, add).should.be.equal(org);
    org.should.be.deep.equal({
      a: 3,
      b: 2
    });
    extend(org, {
      b: 4,
      c: 2
    });
    return org.should.be.deep.equal({
      a: 3,
      b: 4,
      c: 2
    });
  });
  return it("should extend many object", function() {
    var add, org, third;
    org = {
      a: 1,
      b: 2
    };
    add = {
      a: 3
    };
    third = {
      c: 4
    };
    extend(org, add, third, {
      d: 5,
      b: 0
    }).should.be.equal(org);
    return org.should.be.deep.equal({
      a: 3,
      b: 0,
      c: 4,
      d: 5
    });
  });
});

describe("extend", function() {
  var extend;
  extend = require('../src/extend');
  it("should extend an object", function() {
    var add, org;
    org = {
      a: 1,
      b: 2
    };
    add = {
      a: 3
    };
    extend(org, add).should.be.equal(org);
    org.should.be.deep.equal({
      a: 3,
      b: 2
    });
    extend(org, {
      b: 4,
      c: 2
    });
    return org.should.be.deep.equal({
      a: 3,
      b: 4,
      c: 2
    });
  });
  it("should extend many object", function() {
    var add, org, third;
    org = {
      a: 1,
      b: 2
    };
    add = {
      a: 3
    };
    third = {
      c: 4
    };
    extend(org, [
      add,
      third,
      {
        d: 5,
        b: 0
      }
    ]).should.be.equal(org);
    return org.should.be.deep.equal({
      a: 3,
      b: 0,
      c: 4,
      d: 5
    });
  });
  return it("should extend an object and filter properties", function() {
    var add, org;
    org = {};
    add = {
      a: 3,
      b: 3,
      c: 2,
      d: 123
    };
    extend(org, add, function(k, v) {
      return k === 'a' || k === 'c';
    }).should.be.equal(org);
    return org.should.be.deep.equal({
      a: 3,
      c: 2
    });
  });
});

describe("defineProperty", function() {
  var defineProperty;
  defineProperty = require('../src/defineProperty');
  it("should define a property", function() {
    var keys, obj;
    obj = {};
    defineProperty(obj, 'prop', 128);
    obj.should.have.property('prop', 128);
    keys = Object.keys(obj);
    return keys.should.have.length(0);
  });
  it("should define an enumerable property", function() {
    var keys, obj;
    obj = {};
    defineProperty(obj, 'prop', 128, {
      enumerable: true
    });
    obj.should.have.property('prop', 128);
    keys = Object.keys(obj);
    return keys.should.be.deep.equal(['prop']);
  });
  it("should define a property with getter", function() {
    var keys, obj;
    obj = {};
    defineProperty(obj, 'prop', null, {
      get: function() {
        return 128;
      },
      writable: false
    });
    obj.should.have.property('prop', 128);
    keys = Object.keys(obj);
    return keys.should.have.length(0);
  });
  it("should define a configurable property", function() {
    var obj;
    obj = {};
    defineProperty(obj, 'prop', 128);
    obj.should.have.property('prop', 128);
    delete obj.prop;
    return obj.should.not.have.ownProperty('prop');
  });
  it("should define a non-configurable property", function() {
    var obj;
    obj = {};
    defineProperty(obj, 'prop', 128, {
      configurable: false
    });
    obj.should.have.property('prop', 128);
    delete obj.prop;
    return obj.should.have.ownProperty('prop');
  });
  return it("should define a property via options.value", function() {
    var obj;
    obj = {};
    defineProperty(obj, 'prop', void 0, {
      configurable: false,
      value: 128
    });
    return obj.should.have.property('prop', 128);
  });
});
